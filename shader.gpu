const vertexShaderSource = `
    attribute vec3 aPosition;
    attribute vec3 aNormal;

    uniform mat4 uModelViewMatrix;
    uniform mat4 uProjectionMatrix;
    uniform mat4 uNormalMatrix;

    varying vec3 vNormal;
    varying vec3 vPosition;

    void main() {
        vec4 position = uModelViewMatrix * vec4(aPosition, 1.0);
        vPosition = position.xyz;
        vNormal = normalize(mat3(uNormalMatrix) * aNormal);
        gl_Position = uProjectionMatrix * position;
    }
`;

// Fragment Shader
const fragmentShaderSource = `
    precision mediump float;

    uniform vec4 color;
    uniform vec3 uLightDirection;
    uniform vec3 uViewPosition;
    uniform vec3 uAmbientColor;
    uniform vec3 uDiffuseColor;
    uniform vec3 uSpecularColor;
    uniform float uShininess;

    varying vec3 vNormal;
    varying vec3 vPosition;

    void main() {
        vec3 normal = normalize(vNormal);
        vec3 lightDir = normalize(uLightDirection);

        // Ambient
        vec3 ambient = uAmbientColor;

        // Diffuse
        float diff = max(dot(normal, lightDir), 0.0);
        vec3 diffuse = diff * uDiffuseColor;

        // Specular
        vec3 viewDir = normalize(uViewPosition - vPosition);
        vec3 reflectDir = reflect(-lightDir, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), uShininess);
        vec3 specular = spec * uSpecularColor;

        // Combine all components
        vec3 result = (ambient + diffuse + specular) * color.rgb;
        gl_FragColor = vec4(result, color.a);
    }
`;